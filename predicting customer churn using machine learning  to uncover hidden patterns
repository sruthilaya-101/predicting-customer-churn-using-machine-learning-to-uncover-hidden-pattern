# customer_churn_prediction.py

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# ---------------------
# 1. Load the dataset
# ---------------------
# Replace this with your own dataset path or load from a CSV URL
url = "https://raw.githubusercontent.com/blastchar/telco-customer-churn/master/WA_Fn-UseC_-Telco-Customer-Churn.csv"
df = pd.read_csv(url)

# ---------------------
# 2. Data preprocessing
# ---------------------
# Drop customerID column
df.drop("customerID", axis=1, inplace=True)

# Replace 'No internet service' and 'No phone service' with 'No'
df.replace(['No internet service', 'No phone service'], 'No', inplace=True)

# Convert TotalCharges to numeric
df["TotalCharges"] = pd.to_numeric(df["TotalCharges"], errors="coerce")

# Handle missing values
df["TotalCharges"].fillna(df["TotalCharges"].median(), inplace=True)

# Encode categorical variables
binary_cols = ['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling', 'Churn']
for col in binary_cols:
    df[col] = df[col].map({'Yes': 1, 'No': 0})

# One-hot encode remaining categorical columns
df = pd.get_dummies(df, drop_first=True)

# ---------------------
# 3. Feature scaling
# ---------------------
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df.drop("Churn", axis=1))
X = pd.DataFrame(scaled_features, columns=df.columns.drop("Churn"))
y = df["Churn"]

# ---------------------
# 4. Train-test split
# ---------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ---------------------
# 5. Train model
# ---------------------
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# ---------------------
# 6. Evaluate model
# ---------------------
y_pred = model.predict(X_test)

print("Classification Report:\n")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:\n")
print(confusion_matrix(y_test, y_pred))

# ---------------------
# 7. Uncover hidden patterns (Feature Importance)
# ---------------------
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
top_features = feature_importances.sort_values(ascending=False)[:10]

# Plot feature importance
plt.figure(figsize=(10, 6))
sns.barplot(x=top_features, y=top_features.index)
plt.title("Top 10 Features Influencing Customer Churn")
plt.xlabel("Feature Importance Score")
plt.ylabel("Features")
plt.tight_layout()
plt.show()
